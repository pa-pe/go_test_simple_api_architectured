// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	models "testapi/models"

	mock "github.com/stretchr/testify/mock"
)

// CacheRepository is an autogenerated mock type for the CacheRepository type
type CacheRepository struct {
	mock.Mock
}

// LoadCache provides a mock function with given fields: name, last
func (_m *CacheRepository) LoadCache(name string, last string) ([]models.Address, error) {
	ret := _m.Called(name, last)

	if len(ret) == 0 {
		panic("no return value specified for LoadCache")
	}

	var r0 []models.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]models.Address, error)); ok {
		return rf(name, last)
	}
	if rf, ok := ret.Get(0).(func(string, string) []models.Address); ok {
		r0 = rf(name, last)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, last)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCache provides a mock function with given fields: name, last, newAddresses
func (_m *CacheRepository) UpdateCache(name string, last string, newAddresses []models.Address) error {
	ret := _m.Called(name, last, newAddresses)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []models.Address) error); ok {
		r0 = rf(name, last, newAddresses)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCacheRepository creates a new instance of CacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheRepository {
	mock := &CacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
