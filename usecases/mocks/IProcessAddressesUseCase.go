// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	models "testapi/models"

	mock "github.com/stretchr/testify/mock"
)

// IProcessAddressesUseCase is an autogenerated mock type for the IProcessAddressesUseCase type
type IProcessAddressesUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: request
func (_m *IProcessAddressesUseCase) Execute(request models.RequestData) (models.ResponseData, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 models.ResponseData
	var r1 error
	if rf, ok := ret.Get(0).(func(models.RequestData) (models.ResponseData, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(models.RequestData) models.ResponseData); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(models.ResponseData)
	}

	if rf, ok := ret.Get(1).(func(models.RequestData) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIProcessAddressesUseCase creates a new instance of IProcessAddressesUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProcessAddressesUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProcessAddressesUseCase {
	mock := &IProcessAddressesUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
